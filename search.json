[{"path":"/articles/config.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting started with the config package","text":"config package makes easy manage environment specific configuration values. example, might want use distinct values development, testing, production environments.","code":""},{"path":"/articles/config.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Getting started with the config package","text":"Configurations defined using YAML text file read default file named config.yml current working directory (parent directories config file found initially specified directory). Configuration files include default values well values arbitrary named configurations, example: config.yml read configuration values call config::get function, returns list containing values currently active configuration: can also read single value configuration follows: get function takes optional config argument determines configuration read values (“default” configuration used none specified).","code":"default:   trials: 5   dataset: \"data-sampled.csv\"    production:   trials: 30   dataset: \"data.csv\" config <- config::get() config$trials config$dataset config::get(\"trials\") config::get(\"dataset\")"},{"path":"/articles/config.html","id":"configurations","dir":"Articles","previous_headings":"","what":"Configurations","title":"Getting started with the config package","text":"can specify configuration currently active setting R_CONFIG_ACTIVE environment variable. R_CONFIG_ACTIVE variable typically set within site-wide Renviron Rprofile (see R Startup details files). can check whether particular configuration active using config::is_active function:","code":"# set the active configuration globally via Renviron.site or Rprofile.site Sys.setenv(R_CONFIG_ACTIVE = \"production\")  # read configuration value (will return 30 from the \"production\" config) config::get(\"trials\") config::is_active(\"production\")"},{"path":"/articles/config.html","id":"configuration-files","dir":"Articles","previous_headings":"","what":"Configuration Files","title":"Getting started with the config package","text":"default configuration data read file named config.yml within current working directory (parent directories config file found initially specified directory). can use file argument config::get read alternate location. example: don’t want ever scan parent directories configuration files can specify use_parent = FALSE:","code":"config <- config::get(file = \"conf/config.yml\") config <- config::get(file = \"conf/config.yml\", use_parent = FALSE)"},{"path":"/articles/config.html","id":"do-not-attach-the-package-using-libaryconfig","dir":"Articles","previous_headings":"","what":"Do not attach the package using libary(config)","title":"Getting started with the config package","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions config mask functions names base R.","code":""},{"path":"/articles/inheritance.html","id":"defaults-and-inheritance","dir":"Articles","previous_headings":"","what":"Defaults and inheritance","title":"Inheritance and R expressions","text":"default configuration provides set values use named configuration active. configurations automatically inherit default values need define values specialized configuration. example, configuration production configuration doesn’t specify value trials read default configuration: config.yml configurations automatically inherit “default” configuration. Configurations can also inherit one named configurations. example, file production configuration inherits test configuration: config.yml","code":"default:   trials: 5   dataset: \"data-sampled.csv\"    production:   dataset: \"data.csv\" default:   trials: 5   dataset: \"data-sampled.csv\"  test:   trials: 30   dataset: \"data-test.csv\"    production:   inherits: test   dataset: \"data.csv\""},{"path":"/articles/inheritance.html","id":"embedding-r-code-inside-the-yaml-file","dir":"Articles","previous_headings":"","what":"Embedding R code inside the yaml file","title":"Inheritance and R expressions","text":"can execute R code within configuration files prefacing values !expr. useful case want base configuration values environment variables, R options, even config files. example: config.yml","code":"default:   cores: 2   debug: true   server: \"localhost:5555\"     production:   cores: !expr getOption(\"mc.cores\")   debug: !expr Sys.getenv(\"ENABLE_DEBUG\") == \"1\"   server: !expr config::get(\"server\", file = \"/etc/server-config.yml\")"},{"path":"/articles/inheritance.html","id":"referencing-previously-assigned-parameters","dir":"Articles","previous_headings":"Embedding R code inside the yaml file","what":"Referencing previously assigned parameters","title":"Inheritance and R expressions","text":"can use previously assigned parameter inside R code long assigned directly. config.yml can’t reference expressions, generate warning assign NULL value.","code":"default:   file: \"data.csv\"  test:   data_dir: \"test/out\"   dataset: !expr file.path(data_dir, file)    production:   data_dir: \"production/out\"   dataset: !expr file.path(data_dir, file)"},{"path":"/articles/rsconnect.html","id":"using-config-for-staging-and-prod","dir":"Articles","previous_headings":"","what":"Using config for staging and prod","title":"Using config with Posit Connect","text":"may use case use Connect instance host two instances app, staging (test) production. use case soon run problem individual user can change environment variable R_CONFIG_ACTIVE, since configured system-wide administrator. can still use config set different values staging prod, changing environment variable config::get() looks . Specifically, must specify different config argument config::get(). example, can create new environment variable Connect app, called R_CONFIG_ACTIVE_APP, use config::get() like : Additionally, may want utilize inheritance config yaml files, common configuration connect staging prod configurations inherit connect configuration. case, may config.yml file like : config.yml configure environment variable correctly, get appropriate dataset values staging (data-staging.csv) prod (data.csv).","code":"config::get(\"trials\", config = Sys.getenv(\"R_CONFIG_ACTIVE_APP\")) default:   trials: 5   dataset: \"data-sampled.csv\"  connect:   trials: 30    staging:   inherits: connect   dataset: \"data-staging.csv\"    prod:   inherits: connect   dataset: \"data.csv\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"JJ Allaire. Author. Andrie de Vries. Maintainer. . Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Allaire J (2023). config: Manage Environment Specific Configuration Values. https://rstudio.github.io/config/, https://github.com/rstudio/config.","code":"@Manual{,   title = {config: Manage Environment Specific Configuration Values},   author = {JJ Allaire},   year = {2023},   note = {https://rstudio.github.io/config/, https://github.com/rstudio/config}, }"},{"path":"/index.html","id":"config-","dir":"","previous_headings":"","what":"Manage Environment Specific Configuration Values","title":"Manage Environment Specific Configuration Values","text":"config package makes easy manage environment specific configuration values. example, might want use distinct values development, testing, production environments.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manage Environment Specific Configuration Values","text":"can install config package CRAN using:","code":"install.packages(\"config\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Manage Environment Specific Configuration Values","text":"use config, create file config.yml default well arbitrary configurations. example: config.yml read configuration values call config::get function, returns list containing values currently active configuration: can also read single value configuration follows: config::get() function takes optional config argument determines configuration read values (“default” configuration used none specified).","code":"default:   trials: 5   dataset: \"data-sampled.csv\"    production:   trials: 30   dataset: \"data.csv\" config <- config::get() config$trials config$dataset config::get(\"trials\") config::get(\"dataset\")"},{"path":"/index.html","id":"do-not-attach-the-package-using-libaryconfig","dir":"","previous_headings":"","what":"Do not attach the package using libary(config)","title":"Manage Environment Specific Configuration Values","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions config mask functions names base R.","code":""},{"path":"/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage Environment Specific Configuration Values. — config","title":"Manage Environment Specific Configuration Values. — config","text":"Manage configuration values across multiple environments (e.g. development, test, production). Read values using function determines current environment returns appropriate value.","code":""},{"path":"/reference/config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage Environment Specific Configuration Values. — config","text":"main function get() additional details see https://rstudio.github.io/config/.","code":""},{"path":"/reference/get.html","id":null,"dir":"Reference","previous_headings":"","what":"Read configuration values. — get","title":"Read configuration values. — get","text":"Read currently active configuration, retrieving either single named value values list.","code":""},{"path":"/reference/get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read configuration values. — get","text":"","code":"get(   value = NULL,   config = Sys.getenv(\"R_CONFIG_ACTIVE\", \"default\"),   file = Sys.getenv(\"R_CONFIG_FILE\", \"config.yml\"),   use_parent = TRUE )"},{"path":"/reference/get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read configuration values. — get","text":"value Name value (NULL read values) config Name configuration read . Defaults value R_CONFIG_ACTIVE environment variable (\"default\" variable exist). file Configuration file read (defaults \"config.yml\"). file found location specified parent directories searched file name. use_parent TRUE scan parent directories configuration files specified config file found.","code":""},{"path":"/reference/get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read configuration values. — get","text":"requested configuration value (values list NULL passed value). list, vector, corresponding contents config file.","code":""},{"path":"/reference/get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read configuration values. — get","text":"additional details see https://rstudio.github.io/config/.","code":""},{"path":"/reference/get.html","id":"warning-do-not-attach-the-package-using-library-config-","dir":"Reference","previous_headings":"","what":"Warning - Do not attach the package using library(config)","title":"Read configuration values. — get","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions {config} mask functions names base R.","code":""},{"path":[]},{"path":"/reference/get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read configuration values. — get","text":"","code":"# Create an example yaml file and write into tempdir() # In real usage, this config file would be at your project root  yaml <- \" default:   trials: 5   dataset: 'data-sampled.csv'  production:   trials: 30   dataset: 'data.csv' \"  get <- base::get  # only run examples if 'withr' is installed if (requireNamespace(\"withr\", quietly = TRUE)) {    # These examples simulate the presence of a config file by reading from   # tempdir().  In the real world you would typically not use withr::with_dir(),   # but simply read the config file using config::get()    # write config.yaml into tempdir   cat(yaml, file = file.path(tempdir(), \"config.yml\"))    withr::with_dir(tempdir(), {     config::get()   })    withr::with_dir(tempdir(), {     config::get(\"trials\")   })  } #> [1] 5"},{"path":"/reference/is_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Test active configuration — is_active","title":"Test active configuration — is_active","text":"Check whether configuration currently active","code":""},{"path":"/reference/is_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test active configuration — is_active","text":"","code":"is_active(config)"},{"path":"/reference/is_active.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test active configuration — is_active","text":"config Configuration name","code":""},{"path":"/reference/is_active.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test active configuration — is_active","text":"Logical indicating whether specified configuration active","code":""},{"path":"/reference/is_active.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test active configuration — is_active","text":"name currently active configuration read R_CONFIG_ACTIVE environment variable. variable defined \"default\" configuration used. test whether configuration active use is_active() function rather inspecting environment variable directly (tests remain valid means specifying configurations introduced future).","code":""},{"path":[]},{"path":"/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two configurations. — merge","title":"Merge two configurations. — merge","text":"Merge one configuration another recursively.","code":""},{"path":"/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two configurations. — merge","text":"","code":"merge(base_config, merge_config)"},{"path":"/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two configurations. — merge","text":"base_config Configuration merge values merge_config Configuration merge values ","code":""},{"path":"/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two configurations. — merge","text":"Configuration includes values merge_config merged base_config.","code":""},{"path":"/reference/merge.html","id":"warning-do-not-attach-the-package-using-library-config-","dir":"Reference","previous_headings":"","what":"Warning - Do not attach the package using library(config)","title":"Merge two configurations. — merge","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions {config} mask functions names base R.","code":""},{"path":[]},{"path":"/news/index.html","id":"config-031-2020-12-15","dir":"Changelog","previous_headings":"","what":"config 0.3.1 (2020-12-15)","title":"config 0.3.1 (2020-12-15)","text":"CRAN release: 2020-12-17 Bug fix: evaluate expressions active config (configs). previous versions config, expressions yml file evaluated, regardless whether expressions used active config. version, appropriate config selected, expressions evaluated. Fixes #20","code":""},{"path":"/news/index.html","id":"config-030-2018-03-27","dir":"Changelog","previous_headings":"","what":"config 0.3.0 (2018-03-27)","title":"config 0.3.0 (2018-03-27)","text":"Improved handling expressions Bug fixes","code":""},{"path":"/news/index.html","id":"config-020-2016-08-02","dir":"Changelog","previous_headings":"","what":"config 0.2.0 (2016-08-02)","title":"config 0.2.0 (2016-08-02)","text":"Add merge function merge one configuration another.","code":""},{"path":"/news/index.html","id":"config-010-2016-06-08","dir":"Changelog","previous_headings":"","what":"config 0.1.0 (2016-06-08)","title":"config 0.1.0 (2016-06-08)","text":"CRAN release: 2016-06-08 Initial release CRAN","code":""}]
